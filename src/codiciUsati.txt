// src/redux/authSlice.js
import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
  name: "auth",
  initialState: {
    user: null,
    status: "idle",
    error: null,
  },
  reducers: {
    setCredentials: (state, action) => {
      const { user } = action.payload;
      state.user = user;
      state.status = "authenticated";
      state.error = null;
    },
    // ...
  },
});

export const { setCredentials, logOut } = authSlice.actions;

export default authSlice.reducer;
&&&&&***********************************************************************************
// src/redux/store/index.js
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "../authSlice"; // Assuming authSlice.js is located directly under the redux folder

export default configureStore({
  reducer: {
    auth: authReducer,
  },
});
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
// src/context/userContext.jsx
import React, { createContext, useContext, useState, useEffect } from "react";
import { useSelector } from "react-redux";

export const UserContext = createContext(null);

export const UserProvider = ({ children }) => {
  const [contextUser, setContextUser] = useState(null);
  const { user } = useSelector((state) => state.auth);

  useEffect(() => {
    setContextUser(user);
  }, [user]);

  return (
    <UserContext.Provider value={{ user: contextUser }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => useContext(UserContext);
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
// src/api/axiosConfig.js
import axios from "axios";

const api = axios.create({
  baseURL: "http://localhost:8080",
});

export default api;
import { createAsyncThunk } from "@reduxjs/toolkit";
import api from "../../api/axiosConfig"; // Ensure the correct path

export const loginUserAsync = createAsyncThunk(
  "auth/loginUser",
  async (credentials) => {
    const response = await api.post("/auth/login", credentials);
    return response.data;
  }
);

export const registerUserAsync = createAsyncThunk(
  "auth/registerUser",
  async (userData) => {
    const response = await api.post("/auth/register", userData);
    return response.data;
  }
);

export const getUserAsync = createAsyncThunk("auth/getUser", async () => {
  const response = await api.get("/users/me");
  return response.data;
});
